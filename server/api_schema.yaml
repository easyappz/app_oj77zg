openapi: 3.0.0
info:
  title: Photo Rating API
  version: 1.0.0
description: API for a photo rating application with user authentication and photo management.
servers:
  - url: /
paths:
  /api/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required: [email, password]
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      email:
                        type: string
                      points:
                        type: number
        '400':
          description: Email already registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Registration failed
  /api/login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required: [email, password]
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      email:
                        type: string
                      points:
                        type: number
        '400':
          description: Invalid credentials
        '500':
          description: Login failed
  /api/request-reset-password:
    post:
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required: [email]
      responses:
        '200':
          description: Reset token generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  resetToken:
                    type: string
        '404':
          description: User not found
        '500':
          description: Reset password request failed
  /api/reset-password:
    post:
      summary: Reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resetToken:
                  type: string
                newPassword:
                  type: string
              required: [resetToken, newPassword]
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Invalid or expired reset token
        '500':
          description: Password reset failed
  /api/photos/upload:
    post:
      summary: Upload a photo
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
              required: [photo]
      responses:
        '201':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  photo:
                    type: object
        '500':
          description: File upload failed
      security:
        - bearerAuth: []
  /api/photos/{photoId}/toggle-active:
    patch:
      summary: Toggle photo active status for rating
      parameters:
        - in: path
          name: photoId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Photo status toggled
          content:
            application/json:
              schema:
                type: object
                properties:
                  photo:
                    type: object
        '400':
          description: Not enough points
        '404':
          description: Photo not found
        '500':
          description: Toggle photo active status failed
      security:
        - bearerAuth: []
  /api/photos/{photoId}/filters:
    patch:
      summary: Set photo filters
      parameters:
        - in: path
          name: photoId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                genderFilter:
                  type: string
                  enum: [all, male, female]
                ageFilter:
                  type: string
                  enum: [all, 18-25, 26-35, 36+]
      responses:
        '200':
          description: Filters updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  photo:
                    type: object
        '404':
          description: Photo not found
        '500':
          description: Set photo filters failed
      security:
        - bearerAuth: []
  /api/photos/rating:
    get:
      summary: Get photos for rating
      parameters:
        - in: query
          name: gender
          schema:
            type: string
        - in: query
          name: age
          schema:
            type: number
      responses:
        '200':
          description: List of photos for rating
          content:
            application/json:
              schema:
                type: object
                properties:
                  photos:
                    type: array
                    items:
                      type: object
        '500':
          description: Get photos for rating failed
      security:
        - bearerAuth: []
  /api/photos/{photoId}/rate:
    post:
      summary: Rate a photo
      parameters:
        - in: path
          name: photoId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
                raterGender:
                  type: string
                  enum: [male, female, other]
                raterAge:
                  type: number
              required: [rating]
      responses:
        '201':
          description: Rating submitted
          content:
            application/json:
              schema:
                type: object
                properties:
                  rating:
                    type: object
                  photo:
                    type: object
        '400':
          description: Cannot rate own photo or already rated
        '404':
          description: Photo not found or not active
        '500':
          description: Rate photo failed
      security:
        - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
